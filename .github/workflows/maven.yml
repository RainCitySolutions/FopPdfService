# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Build and Package FopPdfService

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Build and test code
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest

    outputs:
      release_version: ${{ steps.get-version.outputs.project_version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '16'
        distribution: 'adopt'
        cache: maven

    # Build and test to ensure it's worth continuing
    - name: Build with Maven
      run: mvn -B package --file pom.xml
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Configure Git user
      run: |
        git config user.email "actions@github.com"
        git config user.name "GitHub Actions"

    # Get version number from POM
    - name: Get Version
      id: get-version
      run: echo "project_version=$(sed -n -e 's/.*<version>\(.*\)-SNAPSHOT<\/version>.*/\1/p' <<< cat pom.xml)" >> $GITHUB_OUTPUT
#      run: echo "::set-output name=project_version::$(sed -n -e 's/.*<version>\(.*\)-SNAPSHOT<\/version>.*/\1/p' <<< cat pom.xml)"

    # Rev the version number for the next build
    - name: Rev Version
      id: rev-version
      run: |
        mvn -B release:update-versions --file pom.xml
        git add pom.xml
        echo -n "Rev version to $(sed -n -e 's/.*<version>\(.*\)-SNAPSHOT<\/version>.*/\1/p' <<< cat pom.xml)" | git commit -F -
        git push
      env:
        GITHUB_TOKEN: ${{ github.token }}



  build-linux-rpm-installer:
    name: Build Linux RPM Installer on Ubuntu
    runs-on: ubuntu-latest
    needs: [build-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install packages
      run: |
        sudo apt-get update
        sudo cp jpackage/macros.systemd /usr/lib/rpm/macros.d/
        
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '16'
        distribution: 'adopt'
        cache: maven

    # Create the icon set for use by the application
#    - name: Create Icon Set
#      run: |
#        convert -background transparent icons/cprn-icon1024x1024.png -define icon:auto-resize=16,32,48,64,128,256 -compress zip icons/cprn-lnx.ico

    # BUILD FOR DISTRIBUTION
    - name: Build distribution
      run: |
        mvn -B package --file pom.xml
        jpackage --verbose --type rpm --app-version ${{ needs.build-test.outputs.release_version }} "@jpackage/jpackage.cfg" "@jpackage/jpackage-linux.cfg"
        mv ./target/dist/fop-pdf-service-${{ needs.build-test.outputs.release_version }}-1.x86_64.rpm ./target/dist/fop-pdf-service-${{ needs.build-test.outputs.release_version }}.rpm

    # SAVE INSTALLER
    - name: Upload installer
      uses: actions/upload-artifact@v3
      with:
        path: ./target/dist/fop-pdf-service-${{ needs.build-test.outputs.release_version }}.rpm
        name: linux-rpm-installer
        retention-days: 1



  build-linux-deb-installer:
    name: Build Linux DEB Installer on Ubuntu
    runs-on: ubuntu-20.04
    needs: [build-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install additional code
      run: |
        sudo apt-get update
        #sudo apt-get install libfreetype6 libx11-6
        #sudo cp jpackage/macros.systemd /usr/lib/rpm/macros.d/
      
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '16'
        distribution: 'adopt'
        cache: maven
         
    # Create the icon set for use by the application
#    - name: Create Icon Set
#      run: |
#        convert -background transparent icons/cprn-icon1024x1024.png -define icon:auto-resize=16,32,48,64,128,256 -compress zip icons/cprn-lnx.ico

    # BUILD FOR DISTRIBUTION
    - name: Build distribution
      run: |
        mvn -B package --file pom.xml
        jpackage --verbose --type deb --app-version ${{ needs.build-test.outputs.release_version }} "@jpackage/jpackage.cfg" "@jpackage/jpackage-linux.cfg"
        mv ./target/dist/fop-pdf-service_${{ needs.build-test.outputs.release_version }}-1_amd64.deb ./target/dist/fop-pdf-service-${{ needs.build-test.outputs.release_version }}.deb

    # SAVE INSTALLER
    - name: Upload installer
      uses: actions/upload-artifact@v3
      with:
        path: ./target/dist/fop-pdf-service-${{ needs.build-test.outputs.release_version }}.deb
        name: linux-deb-installer
        retention-days: 1



  build-linux-deb-arm64-installer:
    name: Build Linux DEB ARM64 Installer on Ubuntu
    runs-on: buildjet-2vcpu-ubuntu-2204-arm
    needs: [build-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install additional code
      run: |
        sudo apt-get update
        sudo apt-get install maven
        #sudo apt-get install libfreetype6 libx11-6 maven
        #sudo cp jpackage/macros.systemd /usr/lib/rpm/macros.d/
      
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '16'
        distribution: 'adopt'
        architecture: 'aarch64'
        cache: maven
         
    # Create the icon set for use by the application
#    - name: Create Icon Set
#      run: |
#        convert -background transparent icons/cprn-icon1024x1024.png -define icon:auto-resize=16,32,48,64,128,256 -compress zip icons/cprn-lnx.ico

    # BUILD FOR DISTRIBUTION
    - name: Build distribution
      run: |
        mvn -B package --file pom.xml
        jpackage --verbose --type deb --app-version ${{ needs.build-test.outputs.release_version }} "@jpackage/jpackage.cfg" "@jpackage/jpackage-linux.cfg"
#        mv ./target/dist/fop-pdf-service_${{ needs.build-test.outputs.release_version }}-1_arm64.deb ./target/dist/fop-pdf-service-arm64-${{ needs.build-test.outputs.release_version }}.deb

    # Rebuild DEB file without zst compression
    - name: Rebuild DEB file
      run: |
        mkdir repackage
        pushd repackage
        echo extracting .deb
        ar x ./../target/dist/fop-pdf-service_${{ needs.build-test.outputs.release_version }}-1_arm64.deb
        echo recompressing
        zstd -d < control.tar.zst | xz > control.tar.xz
        zstd -d < data.tar.zst | xz > data.tar.xz
        echo reconstructing
        ar r ./../target/dist/fop-pdf-service-arm64-${{ needs.build-test.outputs.release_version }}.deb debian-binary control.tar.xz data.tar.xz
        echo cleaning up
        rm debian-binary control.tar.xz data.tar.xz control.tar.zst data.tar.zst
        popd

    # SAVE INSTALLER
    - name: Upload installer
      uses: actions/upload-artifact@v3
      with:
        path: ./target/dist/fop-pdf-service-arm64-${{ needs.build-test.outputs.release_version }}.deb
        name: linux-deb-arm64-installer
        retention-days: 1



  build-linux-app-image:
    if: ${{ false }}  # disable for now
    name: Build Linux ZIP Image on Ubuntu
    runs-on: ubuntu-latest
    needs: [build-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '16'
        distribution: 'adopt'
        cache: maven

    # Create the icon set for use by the application
#    - name: Create Icon Set
#      run: |
#        convert -background transparent icons/cprn-icon1024x1024.png -define icon:auto-resize=16,32,48,64,128,256 -compress zip icons/cprn-lnx.ico

    # BUILD FOR DISTRIBUTION
    - name: Build distribution
      run: |
        mvn -B package --file pom.xml
        jpackage --verbose --app-version ${{ needs.build-test.outputs.release_version }} --type app-image "@jpackage/jpackage.cfg"

    - name: Zip App Image
      uses: papeloto/action-zip@v1
      with:
        files: ./target/dist/FopPdfService
        dest: ./target/dist/fop-pdf-service-${{ needs.build-test.outputs.release_version }}.linux.zip
    
    # SAVE INSTALLER
    - name: Upload installer
      uses: actions/upload-artifact@v3
      with:
        path: ./target/dist/fop-pdf-service-${{ needs.build-test.outputs.release_version }}.linux.zip
        name: linux-app-image
        retention-days: 1



  build-windows-package:
    if: ${{ false }}  # disable for now
    name: Build Package on Windows
    runs-on: windows-latest
    needs: [build-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup JDK
      uses: actions/setup-java@v3
      with:
        java-version: '16'
        distribution: 'adopt'
        cache: maven

    # BUILD FOR DISTRIBUTION
    - name: Build distribution
      run: |
        mvn -B package --file pom.xml
        jpackage --verbose --app-version ${{ needs.build-test.outputs.release_version }} "@jpackage/jpackage.cfg" "@jpackage/jpackage-windows-image.cfg"

    - name: Zip App Image
      uses: papeloto/action-zip@v1
      with:
        files: ./target/dist/FopPdfService
        dest: ./target/dist/fop-pdf-service-${{ needs.build-test.outputs.release_version }}.zip
    
    # SAVE INSTALLER
    - name: Upload installer
      uses: actions/upload-artifact@v3
      with:
        path: ./target/dist/fop-pdf-service-${{ needs.build-test.outputs.release_version }}.zip
        name: windows-app-image
        retention-days: 1



  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-test, build-linux-rpm-installer, build-linux-deb-installer, build-linux-deb-arm64-installer]

    steps:
    # DOWNLOAD INSTALLERS
    - name: Download Linux RPM installer
      uses: actions/download-artifact@v3
      with:
        name: linux-rpm-installer

    - name: Download Linux DEB installer
      uses: actions/download-artifact@v3
      with:
        name: linux-deb-installer

    - name: Download Linux DEB ARM64 installer
      uses: actions/download-artifact@v3
      with:
        name: linux-deb-arm64-installer

    - name: Download Windows package
      if: ${{ false }}  # disable for now
      uses: actions/download-artifact@v3
      with:
        name: windows-app-image

    - name: Download Linux app image
      if: ${{ false }}  # disable for now
      uses: actions/download-artifact@v3
      with:
        name: linux-app-image

    # CREATE GITHUB RELEASE AND ADD ASSETS
    - name: Create GitHub release
      id: create-release
      uses: ncipollo/release-action@v1
      with:
        tag: v${{ needs.build-test.outputs.release_version }}
        name: Release ${{ needs.build-test.outputs.release_version }}
        commit: ${{ env.version-commit-ref }}
        omitBody: true
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: |
          fop-pdf-service-${{ needs.build-test.outputs.release_version }}.rpm
          fop-pdf-service-${{ needs.build-test.outputs.release_version }}.deb
          fop-pdf-service-arm64-${{ needs.build-test.outputs.release_version }}.deb
#          fop-pdf-service-${{ needs.build-test.outputs.release_version }}.linux.zip
#          fop-pdf-service-${{ needs.build-test.outputs.release_version }}.zip
